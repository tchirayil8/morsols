{"version":3,"sources":["containers/Homepage.jsx","components/layout/Navbar.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Homepage","useState","page","setPage","useEffect","window","fetch","method","headers","Authorization","body","JSON","stringify","query","then","response","json","data","errors","console","error","homepageCollection","items","log","className","description1","description2","description3","description4","Navbar","App","exact","path","component","Boolean","location","hostname","match","createBrowserHistory","ReactDOM","render","StrictMode","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"6OAgBaA,EAAW,WAAO,IAAD,EACJC,mBAAS,MADL,mBACrBC,EADqB,KACfC,EADe,KAsB5B,OAnBAC,qBAAU,WACRC,OACGC,MADH,iEAC2E,CACvEC,OAAQ,OACRC,QAAS,CACL,eAAgB,mBAChBC,cAAe,sDAEnBC,KAAMC,KAAKC,UAAU,CAAEC,MAzBpB,kKA2BJC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,YAAuB,IAApBG,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACTA,GACFC,QAAQC,MAAMF,GAEhBf,EAAQc,EAAKI,mBAAmBC,MAAM,SAEvC,IAEApB,GAILiB,QAAQI,IAAI,OAAOrB,GAGjB,yBAAKsB,UAAU,YACb,yBAAKA,UAAU,6BACf,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,2BACZtB,EAAKuB,cAER,yBAAKD,UAAU,2BACZtB,EAAKwB,eAGV,yBAAKF,UAAU,sBACf,yBAAKA,UAAU,aACb,yBAAKA,UAAU,2BACZtB,EAAKyB,cAER,yBAAKH,UAAU,2BACZtB,EAAK0B,kBAvBL,cCrCAC,EAAS,WAClB,OACI,yBAAKL,UAAU,UACX,yBAAKA,UAAU,gBACf,yBAAKA,UAAU,mBACf,yBAAKA,UAAU,qBCFdM,EAAM,WACjB,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWjC,OCErBkC,QACW,cAA7B7B,OAAO8B,SAASC,UAEe,UAA7B/B,OAAO8B,SAASC,UAEhB/B,OAAO8B,SAASC,SAASC,MACvB,2DCRUC,cAEhBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAQC,SAAS,KACf,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAA9B,GACLD,QAAQC,MAAMA,EAAM+B,c","file":"static/js/main.c9aaa1c7.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nconst query = `\n{\n  homepageCollection {\n    items {\n      headerText\n      description1\n      description2\n      description3\n      description4\n    }\n  }\n}\n`\n\nexport const Homepage = () => {\n  const [page, setPage] = useState(null);\n  \n  useEffect(() => {\n    window\n      .fetch(`https://graphql.contentful.com/content/v1/spaces/ts1x993q12de/`, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: \"Bearer 4jAC4tc_Z1Q7CMxOYCpeRgl9ZUhj2qhXBh28y3eqmoU\",\n        },\n        body: JSON.stringify({ query }),\n      })\n      .then((response) => response.json())\n      .then(({ data, errors }) => {\n        if (errors) {\n          console.error(errors);\n        }\n        setPage(data.homepageCollection.items[0]);\n        });\n    }, []);\n  \n  if (!page) {\n      return \"Loading...\";\n  }\n\n  console.log('page',page);\n    \n  return (\n    <div className=\"homepage\">\n      <div className=\"homepage__header-picture\" />\n      <div className=\"homepage__body\">\n        <div className=\"container\">\n          <div className=\"homepage__description-1\">\n            {page.description1}\n          </div>\n          <div className=\"homepage__description-2\">\n            {page.description2}\n          </div>\n        </div>\n        <div className=\"homepage__picture\" />\n        <div className=\"container\">\n          <div className=\"homepage__description-3\">\n            {page.description3}\n          </div>\n          <div className=\"homepage__description-4\">\n            {page.description4}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport const Navbar = () => {\n    return (\n        <div className=\"navbar\">\n            <div className=\"navbar__top\"></div>\n            <div className=\"navbar__middle\"></div>\n            <div className=\"navbar__bottom\"></div>\n        </div>\n    );\n}","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { Homepage } from './containers/Homepage';\nimport { Navbar } from './components/layout/Navbar';\n\nexport const App = () => {\n  return (\n    <>\n      <Navbar />\n      <Switch>\n        <Route exact path=\"/\" component={Homepage} />\n      </Switch>\n    </>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  HashRouter as Router,\n} from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport './styles/index.scss';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst history = createBrowserHistory();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename=\"/\">\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}